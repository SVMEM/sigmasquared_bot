import telebot
from telebot import types
import csv
import datetime
import time

TOKEN = 'YOURTOKEN'

bot = telebot.TeleBot(TOKEN)


markupm = types.ReplyKeyboardMarkup()
btn1 = types.KeyboardButton('üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ')
btn2 = types.KeyboardButton('‚úíÔ∏è–ú–æ–∏ –¥–æ–º–∞—à–∫–∏‚úíÔ∏è')
markupm.row(btn1, btn2)
btn3 = types.KeyboardButton('üìö–°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—Éüìö')
btn4 = types.KeyboardButton('‚åõÔ∏è–î–µ–¥–ª–∞–π–Ω—ã‚åõÔ∏è')
markupm.row(btn3, btn4)
btn5 = types.KeyboardButton('üí∞–ú–æ–∏ –æ–ø–ª–∞—Ç—ãüí∞')
btn6 = types.KeyboardButton('üö©CTFüö©')
markupm.row(btn5, btn6)

markupn = types.ReplyKeyboardMarkup()
btn1 = types.KeyboardButton('–ù–∞–∑–∞–¥')
markupn.row(btn1)

a3 = 'üü¢'
a2 = 'üü°'
a1 = 'üî¥'
a0 = '‚úñÔ∏è'


@bot.message_handler(commands=['addpayment020822'])
def start_message(message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –∫–ª—é—á –æ–ø–ª–∞—á–∏–≤–∞—é—â–µ–≥–æ')
    bot.register_next_step_handler(message, payee)


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–ª—é—á.')
    bot.register_next_step_handler(message, key)


@bot.message_handler(commands=['menu'])
def start_message(message):
    bot.send_message(message.chat.id, '–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:', reply_markup=markupm)
    bot.register_next_step_handler(message, menu)


def key(message):
    a = 0
    b = 0
    with open('keys.csv', 'r') as fin:
        re = csv.reader(fin)
        for row in re:
            if message.text == row[0]:
                a = 1
                if row[1] == '0':
                    b = 1
                elif row[1] == message.from_user.id:
                    b = 2
                break
    if a == 0:
        bot.send_message(message.chat.id, '–ö–ª—é—á –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π: @raamensavin.')
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–ª—é—á:')
        bot.register_next_step_handler(message, key)
    else:
        if b == 1:
            dic = {}
            with open('keys.csv', 'r') as f:
                re = csv.reader(f)
                for row in re:
                    dic[row[0]] = row[1]

            dic[message.text] = message.from_user.id

            with open('keys.csv', 'w') as fin:
                wr = csv.writer(fin)
                wr.writerows(dic.items())
            with open(f'hw/{message.from_user.id}.csv', 'a') as fin:
                pass
            with open(f'payments/{message.from_user.id}.csv', 'a') as fin:
                pass
            bot.send_message(message.chat.id, '–ö–∞–π—Ñ, –≤—Å–µ –ø–æ–¥–æ—à–ª–æ, –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç.')
            bot.forward_message('726382042', message.chat.id, message.message_id)
            bot.send_message(message.chat.id, '–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:', reply_markup=markupm)
            bot.register_next_step_handler(message, menu)
        elif b == 2:
            bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é.')
            bot.send_message(message.chat.id, '–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:', reply_markup=markupm)
        else:
            bot.send_message(message.chat.id, '–ö–ª—é—á –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º,'
                                              ' —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π: @raamensavin.')
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–ª—é—á:')
            bot.register_next_step_handler(message, key)


def menu(message):
    a = 0
    with open('keys.csv', 'r') as f:
        re = csv.reader(f)
        for row in re:
            if int(row[1]) == message.from_user.id:
                a = 1
                break
    if a == 1:
        if message.text == 'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüìÖ':
            text21 = '[–†–ê–°–ü–ò–°–ê–ù–ò–ï](https://calendar.yandex.ru/embed/week?&layer_ids=28029544&tz_id=Europe/Moscow' \
                     '&layer_names=Sigma_Squared)'
            bot.send_photo(message.chat.id, open('File1.png', 'rb'))
            bot.send_photo(message.chat.id, open('File2.png', 'rb'))
            bot.send_message(message.chat.id, text=text21, parse_mode='MarkdownV2')
            bot.register_next_step_handler(message, menu)
        elif message.text == '‚úíÔ∏è–ú–æ–∏ –¥–æ–º–∞—à–∫–∏‚úíÔ∏è':
            at = []
            try:
                with open(f'hw/{message.from_user.id}.csv', 'r') as fin:
                    re = csv.reader(fin)
                    for row in re:
                        at.append(row)
                for i in at:
                    if i[1] == 'a0':
                        i[1] = a0
                    elif i[1] == 'a1':
                        i[1] = a1
                    elif i[1] == 'a2':
                        i[1] = a2
                    elif i[1] == 'a3':
                        i[1] = a3
                text1 = '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–≤–æ–∏–º –¥–æ–º–∞—à–∫–∞–º, –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n\n'
                for i in at:
                    text1 += f'HW{i[0]} {i[1]} --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {i[2]} \n'
                bot.send_message(message.chat.id, text=text1)
                bot.register_next_step_handler(message, menu)
            except:
                bot.send_message(message.chat.id, text='–ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @raamensavin')
                bot.register_next_step_handler(message, menu)
        elif message.text == 'üìö–°–¥–∞—Ç—å –¥–æ–º–∞—à–∫—Éüìö':
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–∫—É –û–î–ù–ò–ú PDF —Ñ–∞–π–ª–æ–º', reply_markup=markupn)
            bot.register_next_step_handler(message, ch4)
        elif message.text == '‚åõÔ∏è–î–µ–¥–ª–∞–π–Ω—ã‚åõÔ∏è':
            with open('dead.txt', 'r') as f:
                T = f.read().split()
            now = datetime.datetime.today()
            DD = datetime.datetime(int(T[0]), int(T[1]), int(T[2]))
            d = DD - now  # str(d)  '83 days, 2:43:10.517807'
            mm, ss = divmod(d.seconds, 60)
            hh, mm = divmod(mm, 60)
            bot.send_message(message.chat.id, '–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –¥–æ–º–∞—à–µ–∫: '
                                              '{} –¥–Ω–µ–π {} —á–∞—Å–∞ {} –º–∏–Ω.'.format(d.days, hh, mm))
            bot.register_next_step_handler(message, menu)
        elif message.text == 'üí∞–ú–æ–∏ –æ–ø–ª–∞—Ç—ãüí∞':
            try:
                tete = '–í–∞—à–∏ –æ–ø–ª–∞—Ç—ã:\n\n'
                with open(f'payments/{message.from_user.id}.csv', 'r') as fin:
                    re = csv.reader(fin)
                    for row in re:
                        tete += row[0]+'\n'
                        A = row[0].split()
                    DD = datetime.datetime(int(A[2]), int(A[1]), int(A[0]))
                    nextie = DD + datetime.timedelta(days=28)
                    tete += f'\n–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞: ' + f'{nextie.day}'.zfill(2) + '.' + f'{nextie.month}'.zfill(2) + '.' + \
                            f'{nextie.year}'
                bot.send_message(message.chat.id, text=tete)
                bot.register_next_step_handler(message, menu)
            except:
                bot.send_message(message.chat.id, text='–ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @raamensavin')
                bot.register_next_step_handler(message, menu)
        elif message.text == 'üö©CTFüö©':
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–ª–∞–≥, –Ω–∞–π–¥–µ–Ω–Ω—ã–π –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–º–∞—à–∫–µ.', reply_markup=markupn)
            bot.register_next_step_handler(message, ctf)
        elif message.text == '–Ω–∞–∑–∞–¥—Ä–æ–º–∞':
            bot.send_message(message.chat.id, '–≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
        else:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.')
            bot.register_next_step_handler(message, menu)
    else:
        bot.send_message(message.chat.id, '–í–∞—à –∫–æ–¥ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @raamensavin.')
        bot.register_next_step_handler(message, menu)

def ctf(message):
    with open('ctf.txt', 'r') as fin:
        flag = fin.read()
    if message.text == flag:
        with open('flag.csv', 'r') as fin:
            re = csv.reader(fin)
            a = 0
            at = []
            for row in re:
                a += 1
                at += row
        if at.count(message.from_user.username) == 0:
            with open('flag.csv', 'a') as f:
                wr = csv.writer(f)
                user = [datetime.datetime.now(), time.time(), message.from_user.username, message.from_user.id,
                        message.text]
                wr.writerow(user)
            bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Å–¥–∞–ª —Ñ–ª–∞–≥ {a+1}-–º', reply_markup=markupm)
            bot.register_next_step_handler(message, menu)
        else:
            bot.send_message(message.chat.id, '–¢—ã —É–∂–µ —Å–¥–∞–ª —ç—Ç–æ—Ç —Ñ–ª–∞–≥', reply_markup=markupm)
            bot.register_next_step_handler(message, menu)
    elif message.text.lower() == '–Ω–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–¢—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markupm)
        bot.register_next_step_handler(message, menu)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, ctf)

def payee(message):
    a = ''
    with open('keys.csv', 'r') as fin:
        re = csv.reader(fin)
        for row in re:
            if row[0] == message.text:
                a = row[1]
                break
    try:
        with open(f'payments/{a}.csv', 'a') as f:
            wr = csv.writer(f)
            d = datetime.datetime.today()
            kk = f'{d.day}'.zfill(2) + ' ' + f'{d.month}'.zfill(2) + ' ' + f'{d.year}'
            wr.writerow([kk, a])
        bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ')
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')


def ch4(message):
    if message.photo is not None:
        msg1 = bot.send_message(message.chat.id, '–≠—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∞ –Ω–µ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.', reply_markup=markupn)
        bot.register_next_step_handler(msg1, ch4)
    elif message.document is not None:
        if message.document.file_name.endswith('.pdf'):
            bot.forward_message('yourid', message.chat.id, message.message_id)
            bot.send_message(chat_id='yourid', text=f"{message.from_user.username} {message.from_user.id} —Å–¥–∞–ª")
            bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ, –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ —Ä–∞–∑'
                                              ', –ø—Ä–æ–≤–µ—Ä–µ–Ω –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.', reply_markup=markupm)
            bot.register_next_step_handler(message, menu)
        else:
            msg1 = bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ pdf, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', reply_markup=markupn)
            bot.register_next_step_handler(msg1, ch4)
    else:
        if message.text.lower() == '–Ω–∞–∑–∞–¥':
            bot.send_message(message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å:', reply_markup=markupm)
            bot.register_next_step_handler(message, menu)
        else:
            msg1 = bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤—Å–µ —Ä–µ—à–µ–Ω–∏–µ'
                                                     ' –¥–æ–º–∞—à–∫–∏ –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º.', reply_markup=markupn)
            bot.register_next_step_handler(msg1, ch4)


@bot.message_handler()
def penis(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–∞ –∏–ª–∏ /menu "
                                      "–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


bot.infinity_polling()
